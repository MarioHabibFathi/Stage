#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  8 14:15:11 2023

@author: mariohabibfathi
"""
import os
import numpy as np
import pandas as pd
from sklearn.linear_model import RidgeClassifierCV
from sklearn.preprocessing import LabelEncoder
from rocket_functions import generate_kernels, apply_kernels


def load_data(file_name):
    folder_path = "/home/mariohabibfathi/Stage mario habib/Datasets/UCR/UCRArchive_2018/"
    folder_path += (file_name + "/")
    train_path = folder_path + file_name + "_TRAIN.tsv"
    test_path = folder_path + file_name + "_TEST.tsv"
    if (os.path.exists(test_path) <= 0):
        print("File not found")
        return None, None, None, None
    train = np.loadtxt(train_path, dtype=np.float64)
    test = np.loadtxt(test_path, dtype=np.float64)
    ytrain = train[:, 0]
    ytest = test[:, 0]
    xtrain = np.delete(train, 0, axis=1)
    xtest = np.delete(test, 0, axis=1)
    return xtrain, ytrain, xtest, ytest

def znormalisation(x):

    if  isinstance(x,np.ndarray):
        stds = np.std(x,axis=1,keepdims=True)
        if len(stds[stds == 0.0]) > 0:
            stds[stds == 0.0] = 1.0
            return (x - x.mean(axis=1, keepdims=True)) / stds
        return (x - x.mean(axis=1, keepdims=True)) / (x.std(axis=1, keepdims=True))

datasets = ['SmoothSubspace','SyntheticControl','BeetleFly','BirdChicken',
            'Coffee','UMD','Meat','ItalyPowerDemand','Chinatown','ECG200']

# datasets = ['SmoothSubspace','BeetleFly','BirdChicken',
#             'Coffee','UMD','Meat','Chinatown']


datasets = ['SyntheticControl']

acc = []
err_rate = []
num_runs = 5
num_ker = 10_000

dataset_result = []
dataset_std = []


for data in datasets:
    xtrain,ytrain,xtest,ytest = load_data(data)
    
    # xtrain = znormalisation(xtrain)
    # xtest = znormalisation(xtest)

    LE = LabelEncoder()
    
    # ytrain = LE.fit_transform(ytrain)
    # ytest = LE.fit_transform(ytest)

    results = []

    for i in range(num_runs):
        kern = generate_kernels(xtrain.shape[-1],num_ker)
        
        X_train_transform = apply_kernels(xtrain, kern)
        
        X_test_transform = apply_kernels(xtest, kern)

        RC = RidgeClassifierCV(alphas = np.logspace(-3, 3, 10))
        RC.fit(X_train_transform, ytrain)
        results.append(RC.score(X_test_transform, ytest))









